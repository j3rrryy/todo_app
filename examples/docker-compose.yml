volumes:
  postgres_data:

networks:
  main_network:
  django_network:


services:
  nginx:
    image: nginx:stable-alpine
    restart: always
    working_dir: /app
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./docker/nginx/prod/:/etc/nginx/conf.d:ro
      - ./docker/certbot/conf:/etc/letsencrypt:ro
      - ./docker/certbot/www:/var/www/certbot:ro
    networks:
      - main_network
    links:
      - django
    depends_on:
      - django
    container_name: nginx_prod

  django:
    build:
      context: .
    restart: always
    expose:
      - 8000
    env_file:
      - docker/env/.env.prod
    volumes:
      - ./:/app
    networks:
      - main_network
      - django_network
    depends_on:
      - postgres
    command: bash -c "python manage.py makemigrations && python manage.py migrate && gunicorn --workers=4 --reload --max-requests=1000 backend.wsgi -b 0.0.0.0:8000"
    container_name: django_prod

  postgres:
    image: postgres:alpine
    restart: always
    env_file:
      - docker/env/.env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - django_network
    container_name: postgres_prod

  certbot:
    image: certbot/certbot
    volumes:
      - ./docker/certbot/conf:/etc/letsencrypt:rw
      - ./docker/certbot/www:/var/www/certbot:rw
    networks:
      - main_network
    depends_on:
      - nginx
    command: certonly --webroot --webroot-path=/var/www/certbot/ --email <your_email> --agree-tos --no-eff-email -d <domain (example.com)> -d <domain (www.example.com)>
    container_name: certbot_prod
